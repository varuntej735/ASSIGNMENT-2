# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r4UBq64OaaHOcA2JQ5DFES9Y_Enxo8wk
"""

import pandas as pd
from google.colab import files

uploaded = files.upload()

import pandas as pd
from google.colab import files

def read_worldbank_data(file_path):
    # Read the World Bank data into a pandas dataframe
    worldbank_data = pd.read_csv(file_path, skiprows=4)

    # Extract relevant columns (Country Name, Country Code, and indicators for each year)
    columns_to_keep = ['Country Name', 'Country Code'] + [col for col in worldbank_data.columns if col.isnumeric()]
    worldbank_data = worldbank_data[columns_to_keep]

    # Transpose the dataframe to have years as columns
    worldbank_data_transposed = worldbank_data.set_index(['Country Name', 'Country Code']).T

    # Reset index for the transposed dataframe
    worldbank_data_transposed.reset_index(inplace=True)

    # Clean column names
    worldbank_data_transposed.columns.name = None

    return worldbank_data, worldbank_data_transposed

# Upload the 'climate.csv' file
uploaded = files.upload()

# Get the uploaded filename
filename = list(uploaded.keys())[0]

# Example usage
worldbank_data, worldbank_data_transposed = read_worldbank_data(filename)

# Print or use the dataframes as needed
print("Original Dataframe:")
print(worldbank_data.head())

print("\nTransposed Dataframe:")
print(worldbank_data_transposed.head())

import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv('Countrywbdata.csv')

correlation = data[data['Indicator Name'].isin(['Electricity production from hydroelectric sources (% of total)',
                                                 'Access to electricity (% of population)'])]

pivot_data = correlation.pivot(index='Year', columns='Indicator Name', values='India')  # Assuming 'India' is a country
pivot_data.dropna(inplace=True)

correlation_matrix = pivot_data.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Electricity Production and Access Relation - India')
plt.show()

import matplotlib.pyplot as plt

urban_growth = wb_df[wb_df['Indicator Name'] == 'Urban population growth (annual %)']
years_columns = wb_df.columns[2:]
urban_growth['Total'] = urban_growth[years_columns].sum(axis=1)
top5_countries = urban_growth.nlargest(8, 'Total')

plt.figure(figsize=(8, 8))
plt.pie(top5_countries['Total'], labels=top5_countries['Country Name'], autopct='%1.1f%%', startangle=90)
plt.legend(bbox_to_anchor=(1, 0.5), loc="center left", title="Country Name", bbox_transform=plt.gcf().transFigure)
plt.title('Annual Urban Growth')
plt.show()

import matplotlib.pyplot as plt

linechart_data = data[(data['Indicator Name'] == 'Agriculture, forestry, and fishing, value added (% of GDP)') &
                      (data['Year'].notna())]

# Assuming the countries are 'Israel', 'South Africa', 'Singapore', 'Malaysia'
countries_to_plot = ['Israel', 'South Africa', 'Singapore', 'Malaysia']
linechart_data = data[['Year'] + countries_to_plot]

grouped_data = linechart_data.groupby('Year').sum()

plt.figure(figsize=(10, 6))
for country in countries_to_plot:
    plt.plot(grouped_data.index, grouped_data[country], label=country)

plt.title('Agriculture and Fishing Value Added to GDP')
plt.xlabel('Year')
plt.ylabel('Value Added Percentage')
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

indicator_name = 'Access to electricity (% of population)'
filtered_df = data[data['Indicator Name'] == indicator_name]

plt.hist(filtered_df['India'], bins=10, edgecolor='black')
plt.title(f'Histogram for {indicator_name} in India')
plt.xlabel('Percentage of Population with Access to Electricity')
plt.ylabel('Frequency')
plt.show()

import matplotlib.pyplot as plt

indicator = 'Urban land area where elevation is below 5 meters (% of total land area)'
selected_data = wb_df[wb_df['Indicator Name'] == indicator]

sum_values = selected_data.groupby('Country Name').sum().iloc[:, 2:]
top_countries = sum_values.sum(axis=1).sort_values(ascending=False).head(10)

plt.figure(figsize=(12, 6))
top_countries.plot(kind='bar', color='green')
plt.title(f'Top 10 Countries for {indicator}')
plt.xlabel('Country')
plt.ylabel('Total')
plt.show()